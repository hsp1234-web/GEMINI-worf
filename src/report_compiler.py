# coding: utf-8
"""
This script compiles monthly reports by integrating post data, financial data summaries,
and insights generated by the Gemini API.
"""
import json
import os
import logging
from datetime import datetime
import re # Added for extract_keywords_from_financial_summary

# Attempt to import Gemini; set a flag if unavailable
try:
    import google.generativeai as genai
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False
    # print("Warning: google.generativeai library not found. Gemini API calls will be skipped.") # Logging handles this

# Configuration
INPUT_JSON_FILE = "monthly_posts_with_financial_data.json" # Should be in the root
OUTPUT_DIR = "reports/txt"
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

# --- Mock/Skip API Call Configuration ---
# This global variable will be checked and potentially modified in __main__ for test runs.
SKIP_GEMINI_CALL_GLOBAL = False
MOCK_GEMINI_RESPONSE = """
**主要金融大事件**
- **全球通膨持續**：本月全球通膨數據居高不下，多國央行持續緊縮政策。對全球市場造成壓力。
- **俄烏戰爭影響**：能源價格波動，供應鏈問題持續。

**特定金融商品事件**
- **VIX (恐慌指數)**：由於市場不確定性增加，VIX 指數在月初顯著上升，隨後有所回落。
- **TSLA (特斯拉)**：發布了超出預期的季度財報，股價大幅上漲。但受到全球供應鏈影響，產能仍面臨挑戰。
"""

# Logging configuration
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def load_processed_data(filepath):
    """Loads the monthly posts with financial data from a JSON file."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logging.error(f"Error: Input file not found at {filepath}")
        return None
    except json.JSONDecodeError:
        logging.error(f"Error: Could not decode JSON from {filepath}")
        return None

def configure_gemini():
    """Configures the Gemini API with the provided key."""
    if not GEMINI_AVAILABLE:
        logging.warning("Gemini library (google.generativeai) not available. Skipping Gemini configuration.")
        return False
    if not GOOGLE_API_KEY:
        logging.error("GOOGLE_API_KEY environment variable not set. Cannot use Gemini API unless calls are skipped.")
        return False # Indicates configuration cannot proceed
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        logging.info("Gemini API configured successfully.")
        return True
    except Exception as e:
        logging.error(f"Error configuring Gemini API: {e}")
        return False

def extract_keywords_from_financial_summary(financial_summary_list):
    """Extracts keywords (e.g., TSLA, ^VIX) from financial data summaries."""
    keywords = set()
    # Example summary: "TSLA (TSLA): 本月開盤..." or "美國10年期公債殖利率 (DGS10): ..."
    pattern = re.compile(r'([^(]+)\s*\(([^)]+)\):') # Extracts "Name" and "(ID)"

    for summary_item in financial_summary_list:
        match = pattern.search(summary_item)
        if match:
            # Add both the name part and the ID part if it looks like a ticker/ID
            name_part = match.group(1).strip()
            id_part = match.group(2).strip()
            keywords.add(name_part) # e.g., "VIX", "TSLA", "美國10年期公債殖利率"
            if re.fullmatch(r'[\w\^.-]+', id_part) and id_part != name_part: # Check if ID is valid-like and not same as name
                 keywords.add(id_part) # e.g., "^VIX", "DGS10"
    if not keywords and financial_summary_list: # If regex fails, try a simpler split
        for summary_item in financial_summary_list:
            parts = summary_item.split(':')
            if parts:
                keywords.add(parts[0].strip()) # Add the part before the first colon
    return keywords


def construct_gemini_prompt(month_posts_content, financial_summary_texts, mentioned_keywords):
    """Constructs the detailed prompt for the Gemini API."""
    all_posts_text = "\n\n---\n\n".join(
        f"標題: {p.get('title', 'N/A')}\n日期: {p.get('date', 'N/A')}\n內容:\n{p.get('post_content', '')}\n留言:\n{p.get('comments', '')}"
        for p in month_posts_content
    )
    financial_data_text = "\n".join(financial_summary_texts)
    product_list_str = ", ".join(sorted(list(mentioned_keywords))) if mentioned_keywords else "貼文中提及的金融商品"

    prompt = f"""你是一位資深金融市場研究員和財經新聞編輯。你的任務是根據提供的貼文內容和部分市場數據，模擬對該月份的 Google 搜索結果，詳細彙整當月發生的所有金融相關大事件和小事件。

以下是該月份的社群貼文內容：
---
{all_posts_text}
---

以下是該月份的部分市場數據摘要：
---
{financial_data_text}
---

任務要求：
1. 請先列出該月份的**主要金融大事件**，並簡要說明其性質和對全球/台灣市場的整體影響。
2. 接著，列出與 {product_list_str} 相關的**小型金融事件或新聞**，並推斷其對這些商品可能造成的具體影響。
3. 請保持嚴謹的分析語氣，並確保內容全面。
4. 請不要臆測貼文作者的個人行為，僅專注於事件彙整。
5. 輸出內容請直接為事件彙整文本，無需額外標題或引言。
"""
    return prompt

def get_gemini_response(prompt, current_skip_gemini_call_flag):
    """Calls the Gemini API and returns the response text."""
    if current_skip_gemini_call_flag:
        logging.info("Skipping actual Gemini API call as per configuration. Using mock response.")
        return MOCK_GEMINI_RESPONSE

    if not GEMINI_AVAILABLE: # Check if library is even there
        logging.warning("Gemini library not available. Cannot make API call.")
        return "Gemini API call skipped: Library not found."

    if not genai.conf.api_key: # Check if API key was successfully configured
        logging.warning("Gemini API key not configured. Cannot make API call.")
        return "Gemini API call skipped: Key not configured."

    try:
        model = genai.GenerativeModel('gemini-pro')
        response = model.generate_content(prompt)
        full_response_text = "".join(part.text for part in response.parts) if hasattr(response, 'parts') and response.parts else response.text
        if not full_response_text.strip(): # Handle empty response from API
            logging.warning("Gemini API returned an empty response.")
            return "Gemini API returned an empty response."
        return full_response_text
    except Exception as e:
        logging.error(f"Error calling Gemini API: {e}")
        if hasattr(e, 'response') and e.response:
             logging.error(f"Gemini API Error Details: {e.response}")
        return f"Error generating response from Gemini API: {e}"


def generate_monthly_report(month_year_str, month_data, current_skip_gemini_call_flag):
    """Generates a single monthly TXT report."""
    if not os.path.exists(OUTPUT_DIR):
        os.makedirs(OUTPUT_DIR)
        logging.info(f"Created output directory: {OUTPUT_DIR}")

    year, month = month_year_str.split('-')
    report_filepath = os.path.join(OUTPUT_DIR, f"monthly_report_{year}_{month}.txt")

    posts_content = month_data.get("posts", [])
    financial_summary = month_data.get("financial_data_summary", [])

    mentioned_keywords = extract_keywords_from_financial_summary(financial_summary)
    gemini_prompt = construct_gemini_prompt(posts_content, financial_summary, mentioned_keywords)

    logging.info(f"Constructed Gemini prompt for {month_year_str} (length: {len(gemini_prompt)} chars). Keywords: {mentioned_keywords}")

    gemini_report_text = get_gemini_response(gemini_prompt, current_skip_gemini_call_flag)
    logging.info(f"Received Gemini response for {month_year_str} (length: {len(gemini_report_text)} chars).")

    report_content = f"# {year} 年 {month} 月 金融市場深度分析報告\n---\n"
    report_content += "## 1. 原始貼文內容整理\n"
    if posts_content:
        for post_idx, post in enumerate(posts_content):
            report_content += f"\n### 貼文 {post_idx + 1}\n"
            report_content += f"標題: {post.get('title', 'N/A')}\n"
            report_content += f"日期: {post.get('date', 'N/A')}\n"
            report_content += f"內容:\n{post.get('post_content', 'N/A')}\n"
            if post.get('comments'):
                report_content += f"留言:\n{post.get('comments', 'N/A')}\n"
            report_content += "---\n"
    else:
        report_content += "本月無貼文內容。\n---\n"

    report_content += "\n## 2. 當月金融市場數據概覽\n"
    if financial_summary:
        for summary_item in financial_summary:
            report_content += f"- {summary_item}\n"
    else:
        report_content += "無金融市場數據摘要。\n"
    report_content += "\n---\n"

    report_content += "## 3. 當月金融大事件與小事件彙整 (Gemini AI 彙整)\n"
    report_content += gemini_report_text if gemini_report_text else "未能生成 AI 彙整內容。\n"

    try:
        with open(report_filepath, 'w', encoding='utf-8') as f:
            f.write(report_content)
        logging.info(f"Successfully generated report: {report_filepath}")
    except IOError as e:
        logging.error(f"Error writing report file {report_filepath}: {e}")

def main():
    """Main function to orchestrate report compilation."""
    global SKIP_GEMINI_CALL_GLOBAL # Allow main to modify the global skip flag if needed for testing

    logging.info("Starting report compilation process...")

    gemini_configured_ok = configure_gemini() # This attempts to configure using GOOGLE_API_KEY

    # Determine if Gemini calls should actually be skipped for this run
    # Skipped if global flag is true, or if lib not available, or if key not set and successfully configured
    # The `configure_gemini` function already logs if key is not set.
    # `get_gemini_response` also has checks. This is an overall control.

    # Effective skip for the run:
    # 1. User explicitly set SKIP_GEMINI_CALL_GLOBAL = True
    # 2. Gemini library is not available
    # 3. GOOGLE_API_KEY is not provided (gemini_configured_ok would be False)
    current_run_skip_gemini = SKIP_GEMINI_CALL_GLOBAL or not GEMINI_AVAILABLE or not gemini_configured_ok

    if current_run_skip_gemini and not SKIP_GEMINI_CALL_GLOBAL: # Log if skip is forced by env not user
        logging.warning("Gemini calls will be skipped for this run due to missing library or API key issues, despite SKIP_GEMINI_CALL_GLOBAL=False.")
    elif SKIP_GEMINI_CALL_GLOBAL:
        logging.info("SKIP_GEMINI_CALL_GLOBAL is True. Gemini calls will use mock data.")


    all_data = load_processed_data(INPUT_JSON_FILE)
    if not all_data:
        logging.error("Failed to load input data. Exiting.")
        return

    for month_year_str, month_data_dict in all_data.items():
        logging.info(f"\nProcessing report for month: {month_year_str}...")
        generate_monthly_report(month_year_str, month_data_dict, current_run_skip_gemini)

    logging.info("Report compilation process completed.")

if __name__ == "__main__":
    # This block helps manage test behavior regarding API calls.
    if not os.path.exists(INPUT_JSON_FILE):
        logging.warning(f"{INPUT_JSON_FILE} not found. Creating a dummy version for testing report_compiler.")
        dummy_input_content = {
            "2023-01": {
                "posts": [
                    {"title": "Test Post 1", "date": "2023-01-10", "post_content": "VIX is high.", "comments": "TSLA to the moon?"}
                ],
                "financial_data_summary": [
                    "VIX (^VIX): Summary for VIX...",
                    "TSLA (TSLA): Summary for TSLA..."
                ]
            },
            "2023-02": {
                "posts": [
                     {"title": "Test Post Feb", "date": "2023-02-05", "post_content": "เกี่ยวกับพันธบัตร (債券) และอัตราผลตอบแทนพันธบัตรรัฐบาลสหรัฐฯ (美國10年期公債殖利率)", "comments": ""}
                ],
                "financial_data_summary": [
                    "債券 (AGG): Bond summary...",
                    "美國10年期公債殖利率 (DGS10): Treasury yield summary..."
                ]
            }
        }
        with open(INPUT_JSON_FILE, 'w', encoding='utf-8') as f_dummy:
            json.dump(dummy_input_content, f_dummy, ensure_ascii=False, indent=4)
        logging.info(f"Dummy {INPUT_JSON_FILE} created for report_compiler testing.")

    # Logic to automatically skip Gemini calls if API key is not set, unless SKIP_GEMINI_CALL_GLOBAL was already True
    if not GOOGLE_API_KEY and not SKIP_GEMINI_CALL_GLOBAL:
        logging.warning("GOOGLE_API_KEY environment variable is not set. Forcing SKIP_GEMINI_CALL_GLOBAL = True for this test run.")
        SKIP_GEMINI_CALL_GLOBAL = True

    main()

    logging.info(f"Script finished. Reports should be in '{OUTPUT_DIR}'.")
    logging.info(f"Gemini Available (library installed): {GEMINI_AVAILABLE}")
    logging.info(f"Google API Key was Set: {bool(GOOGLE_API_KEY)}")
    logging.info(f"Gemini Calls Skipped (this run): {SKIP_GEMINI_CALL_GLOBAL or not GEMINI_AVAILABLE or not genai.conf.api_key if GEMINI_AVAILABLE else 'N/A due to lib missing'}")

print("report_compiler.py loaded.")
